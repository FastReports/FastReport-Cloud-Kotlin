/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cloud.fastreport.client

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import cloud.fastreport.model.AuditActionsVM
import cloud.fastreport.model.BreadcrumbsVM
import cloud.fastreport.model.CountVM
import cloud.fastreport.model.CreateFileShareVM
import cloud.fastreport.model.ExportReportVM
import cloud.fastreport.model.ExportVM
import cloud.fastreport.model.FileIconVM
import cloud.fastreport.model.FilePermissionsVM
import cloud.fastreport.model.FileRenameVM
import cloud.fastreport.model.FileSharingKeysVM
import cloud.fastreport.model.FileSorting
import cloud.fastreport.model.FileTagsUpdateVM
import cloud.fastreport.model.FileVM
import cloud.fastreport.model.FilesVM
import cloud.fastreport.model.FolderIconVM
import cloud.fastreport.model.FolderRenameVM
import cloud.fastreport.model.FolderSizeVM
import cloud.fastreport.model.FolderTagsUpdateVM
import cloud.fastreport.model.PreviewReportVM
import cloud.fastreport.model.ProblemDetails
import cloud.fastreport.model.ReportCreateVM
import cloud.fastreport.model.ReportFolderCreateVM
import cloud.fastreport.model.ReportVM
import cloud.fastreport.model.ReportsVM
import cloud.fastreport.model.SelectedFilesVM
import cloud.fastreport.model.UpdateFilePermissionsVM

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ReportsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Delete all folders and files from recycle bin
     * User with a Delete RecycleBin permission can access this method.
     * @param subscriptionId subscription id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileClearRecycleBin(subscriptionId: kotlin.String) : Unit {
        val localVarResponse = reportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId = subscriptionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete all folders and files from recycle bin
     * User with a Delete RecycleBin permission can access this method.
     * @param subscriptionId subscription id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = reportFolderAndFileClearRecycleBinRequestConfig(subscriptionId = subscriptionId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileClearRecycleBin
     *
     * @param subscriptionId subscription id
     * @return RequestConfig
     */
    fun reportFolderAndFileClearRecycleBinRequestConfig(subscriptionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/rp/v1/Reports/{subscriptionId}/ClearRecycleBin".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Copy folders and files to a specified folder
     * User with a Get permission for a files and Create permission for a destination folder can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileCopyFiles(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM? = null) : Unit {
        val localVarResponse = reportFolderAndFileCopyFilesWithHttpInfo(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Copy folders and files to a specified folder
     * User with a Get permission for a files and Create permission for a destination folder can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileCopyFilesWithHttpInfo(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : ApiResponse<Unit?> {
        val localVariableConfig = reportFolderAndFileCopyFilesRequestConfig(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return request<SelectedFilesVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileCopyFiles
     *
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return RequestConfig
     */
    fun reportFolderAndFileCopyFilesRequestConfig(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : RequestConfig<SelectedFilesVM> {
        val localVariableBody = selectedFilesVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/{subscriptionId}/CopyFiles".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Count all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param subscriptionId subscription id
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return CountVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileCountRecycleBinFoldersAndFiles(subscriptionId: kotlin.String, searchPattern: kotlin.String? = "", useRegex: kotlin.Boolean? = false) : CountVM {
        val localVarResponse = reportFolderAndFileCountRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId = subscriptionId, searchPattern = searchPattern, useRegex = useRegex)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CountVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Count all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param subscriptionId subscription id
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return ApiResponse<CountVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileCountRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId: kotlin.String, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : ApiResponse<CountVM?> {
        val localVariableConfig = reportFolderAndFileCountRecycleBinFoldersAndFilesRequestConfig(subscriptionId = subscriptionId, searchPattern = searchPattern, useRegex = useRegex)

        return request<Unit, CountVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileCountRecycleBinFoldersAndFiles
     *
     * @param subscriptionId subscription id
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return RequestConfig
     */
    fun reportFolderAndFileCountRecycleBinFoldersAndFilesRequestConfig(subscriptionId: kotlin.String, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (searchPattern != null) {
                    put("searchPattern", listOf(searchPattern.toString()))
                }
                if (useRegex != null) {
                    put("useRegex", listOf(useRegex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/{subscriptionId}/CountRecycleBinFolderAndFiles".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete folders and files
     * User with a Delete permission can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileDeleteFiles(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM? = null) : Unit {
        val localVarResponse = reportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete folders and files
     * User with a Delete permission can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : ApiResponse<Unit?> {
        val localVariableConfig = reportFolderAndFileDeleteFilesRequestConfig(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return request<SelectedFilesVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileDeleteFiles
     *
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return RequestConfig
     */
    fun reportFolderAndFileDeleteFilesRequestConfig(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : RequestConfig<SelectedFilesVM> {
        val localVariableBody = selectedFilesVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/{subscriptionId}/DeleteFiles".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get count of files and folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param id folder id
     * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
     * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
     * @return CountVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileGetCount(id: kotlin.String, searchPattern: kotlin.String? = null, useRegex: kotlin.Boolean? = false) : CountVM {
        val localVarResponse = reportFolderAndFileGetCountWithHttpInfo(id = id, searchPattern = searchPattern, useRegex = useRegex)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CountVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get count of files and folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param id folder id
     * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
     * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
     * @return ApiResponse<CountVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileGetCountWithHttpInfo(id: kotlin.String, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : ApiResponse<CountVM?> {
        val localVariableConfig = reportFolderAndFileGetCountRequestConfig(id = id, searchPattern = searchPattern, useRegex = useRegex)

        return request<Unit, CountVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileGetCount
     *
     * @param id folder id
     * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
     * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
     * @return RequestConfig
     */
    fun reportFolderAndFileGetCountRequestConfig(id: kotlin.String, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (searchPattern != null) {
                    put("searchPattern", listOf(searchPattern.toString()))
                }
                if (useRegex != null) {
                    put("useRegex", listOf(useRegex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/CountFolderAndFiles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all folders and files from specified folder
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @param skip number of folder and files, that have to be skipped (optional, default to 0)
     * @param take number of folder and files, that have to be returned (optional, default to 10)
     * @param orderBy indicates a field to sort by (optional)
     * @param desc indicates if sorting is descending (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return FilesVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileGetFoldersAndFiles(id: kotlin.String, skip: kotlin.Int? = 0, take: kotlin.Int? = 10, orderBy: FileSorting? = null, desc: kotlin.Boolean? = false, searchPattern: kotlin.String? = "", useRegex: kotlin.Boolean? = false) : FilesVM {
        val localVarResponse = reportFolderAndFileGetFoldersAndFilesWithHttpInfo(id = id, skip = skip, take = take, orderBy = orderBy, desc = desc, searchPattern = searchPattern, useRegex = useRegex)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FilesVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all folders and files from specified folder
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @param skip number of folder and files, that have to be skipped (optional, default to 0)
     * @param take number of folder and files, that have to be returned (optional, default to 10)
     * @param orderBy indicates a field to sort by (optional)
     * @param desc indicates if sorting is descending (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return ApiResponse<FilesVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileGetFoldersAndFilesWithHttpInfo(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, orderBy: FileSorting?, desc: kotlin.Boolean?, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : ApiResponse<FilesVM?> {
        val localVariableConfig = reportFolderAndFileGetFoldersAndFilesRequestConfig(id = id, skip = skip, take = take, orderBy = orderBy, desc = desc, searchPattern = searchPattern, useRegex = useRegex)

        return request<Unit, FilesVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileGetFoldersAndFiles
     *
     * @param id folder id
     * @param skip number of folder and files, that have to be skipped (optional, default to 0)
     * @param take number of folder and files, that have to be returned (optional, default to 10)
     * @param orderBy indicates a field to sort by (optional)
     * @param desc indicates if sorting is descending (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return RequestConfig
     */
    fun reportFolderAndFileGetFoldersAndFilesRequestConfig(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, orderBy: FileSorting?, desc: kotlin.Boolean?, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (take != null) {
                    put("take", listOf(take.toString()))
                }
                if (orderBy != null) {
                    put("orderBy", listOf(orderBy.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
                if (searchPattern != null) {
                    put("searchPattern", listOf(searchPattern.toString()))
                }
                if (useRegex != null) {
                    put("useRegex", listOf(useRegex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/ListFolderAndFiles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param subscriptionId subscription id
     * @param skip number of folder and files, that have to be skipped (optional, default to 0)
     * @param take number of folder and files, that have to be returned (optional, default to 10)
     * @param orderBy indicates a field to sort by (optional)
     * @param desc indicates if sorting is descending (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return FilesVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileGetRecycleBinFoldersAndFiles(subscriptionId: kotlin.String, skip: kotlin.Int? = 0, take: kotlin.Int? = 10, orderBy: FileSorting? = null, desc: kotlin.Boolean? = false, searchPattern: kotlin.String? = "", useRegex: kotlin.Boolean? = false) : FilesVM {
        val localVarResponse = reportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId = subscriptionId, skip = skip, take = take, orderBy = orderBy, desc = desc, searchPattern = searchPattern, useRegex = useRegex)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FilesVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all folders and files from recycle bin
     * User with a Get DeletedFiles permission can access this method.
     * @param subscriptionId subscription id
     * @param skip number of folder and files, that have to be skipped (optional, default to 0)
     * @param take number of folder and files, that have to be returned (optional, default to 10)
     * @param orderBy indicates a field to sort by (optional)
     * @param desc indicates if sorting is descending (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return ApiResponse<FilesVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, orderBy: FileSorting?, desc: kotlin.Boolean?, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : ApiResponse<FilesVM?> {
        val localVariableConfig = reportFolderAndFileGetRecycleBinFoldersAndFilesRequestConfig(subscriptionId = subscriptionId, skip = skip, take = take, orderBy = orderBy, desc = desc, searchPattern = searchPattern, useRegex = useRegex)

        return request<Unit, FilesVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileGetRecycleBinFoldersAndFiles
     *
     * @param subscriptionId subscription id
     * @param skip number of folder and files, that have to be skipped (optional, default to 0)
     * @param take number of folder and files, that have to be returned (optional, default to 10)
     * @param orderBy indicates a field to sort by (optional)
     * @param desc indicates if sorting is descending (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return RequestConfig
     */
    fun reportFolderAndFileGetRecycleBinFoldersAndFilesRequestConfig(subscriptionId: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, orderBy: FileSorting?, desc: kotlin.Boolean?, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (take != null) {
                    put("take", listOf(take.toString()))
                }
                if (orderBy != null) {
                    put("orderBy", listOf(orderBy.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
                if (searchPattern != null) {
                    put("searchPattern", listOf(searchPattern.toString()))
                }
                if (useRegex != null) {
                    put("useRegex", listOf(useRegex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/{subscriptionId}/ListRecycleBinFolderAndFiles".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Move folders and files to a specified folder
     * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileMoveFiles(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM? = null) : Unit {
        val localVarResponse = reportFolderAndFileMoveFilesWithHttpInfo(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Move folders and files to a specified folder
     * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileMoveFilesWithHttpInfo(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : ApiResponse<Unit?> {
        val localVariableConfig = reportFolderAndFileMoveFilesRequestConfig(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return request<SelectedFilesVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileMoveFiles
     *
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return RequestConfig
     */
    fun reportFolderAndFileMoveFilesRequestConfig(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : RequestConfig<SelectedFilesVM> {
        val localVariableBody = selectedFilesVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/{subscriptionId}/MoveFiles".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Move folders and files to bin
     * User with a Delete permission can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileMoveFilesToBin(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM? = null) : Unit {
        val localVarResponse = reportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Move folders and files to bin
     * User with a Delete permission can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : ApiResponse<Unit?> {
        val localVariableConfig = reportFolderAndFileMoveFilesToBinRequestConfig(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return request<SelectedFilesVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileMoveFilesToBin
     *
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return RequestConfig
     */
    fun reportFolderAndFileMoveFilesToBinRequestConfig(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : RequestConfig<SelectedFilesVM> {
        val localVariableBody = selectedFilesVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/{subscriptionId}/ToBin".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recover all folders and files from recycle bin
     * User with a Create RecycleBin permission can access this method.
     * @param subscriptionId subscription id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileRecoverAllFromRecycleBin(subscriptionId: kotlin.String) : Unit {
        val localVarResponse = reportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId = subscriptionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recover all folders and files from recycle bin
     * User with a Create RecycleBin permission can access this method.
     * @param subscriptionId subscription id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = reportFolderAndFileRecoverAllFromRecycleBinRequestConfig(subscriptionId = subscriptionId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileRecoverAllFromRecycleBin
     *
     * @param subscriptionId subscription id
     * @return RequestConfig
     */
    fun reportFolderAndFileRecoverAllFromRecycleBinRequestConfig(subscriptionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/{subscriptionId}/RecoverRecycleBin".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recover folders and files from bin
     * User with a SubscriptionCreate permission can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFolderAndFileRecoverFiles(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM? = null) : Unit {
        val localVarResponse = reportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recover folders and files from bin
     * User with a SubscriptionCreate permission can access this method.
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : ApiResponse<Unit?> {
        val localVariableConfig = reportFolderAndFileRecoverFilesRequestConfig(subscriptionId = subscriptionId, selectedFilesVM = selectedFilesVM)

        return request<SelectedFilesVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFolderAndFileRecoverFiles
     *
     * @param subscriptionId id of current subscription
     * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
     * @return RequestConfig
     */
    fun reportFolderAndFileRecoverFilesRequestConfig(subscriptionId: kotlin.String, selectedFilesVM: SelectedFilesVM?) : RequestConfig<SelectedFilesVM> {
        val localVariableBody = selectedFilesVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/{subscriptionId}/RecoverFiles".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get specified folder, calculate it&#39;s size
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @return FolderSizeVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersCalculateFolderSize(id: kotlin.String) : FolderSizeVM {
        val localVarResponse = reportFoldersCalculateFolderSizeWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FolderSizeVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get specified folder, calculate it&#39;s size
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @return ApiResponse<FolderSizeVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersCalculateFolderSizeWithHttpInfo(id: kotlin.String) : ApiResponse<FolderSizeVM?> {
        val localVariableConfig = reportFoldersCalculateFolderSizeRequestConfig(id = id)

        return request<Unit, FolderSizeVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersCalculateFolderSize
     *
     * @param id folder id
     * @return RequestConfig
     */
    fun reportFoldersCalculateFolderSizeRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/size".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param id moving folder id
     * @param folderId destination folder id
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersCopyFolder(id: kotlin.String, folderId: kotlin.String) : FileVM {
        val localVarResponse = reportFoldersCopyFolderWithHttpInfo(id = id, folderId = folderId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param id moving folder id
     * @param folderId destination folder id
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersCopyFolderWithHttpInfo(id: kotlin.String, folderId: kotlin.String) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersCopyFolderRequestConfig(id = id, folderId = folderId)

        return request<Unit, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersCopyFolder
     *
     * @param id moving folder id
     * @param folderId destination folder id
     * @return RequestConfig
     */
    fun reportFoldersCopyFolderRequestConfig(id: kotlin.String, folderId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/Folder/{id}/Copy/{folderId}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"folderId"+"}", encodeURIComponent(folderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete specified folder
     * User with a Delete Entity permission can access this method.
     * @param id folder id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersDeleteFolder(id: kotlin.String) : Unit {
        val localVarResponse = reportFoldersDeleteFolderWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete specified folder
     * User with a Delete Entity permission can access this method.
     * @param id folder id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersDeleteFolderWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = reportFoldersDeleteFolderRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersDeleteFolder
     *
     * @param id folder id
     * @return RequestConfig
     */
    fun reportFoldersDeleteFolderRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/rp/v1/Reports/Folder/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Export specified report folder to a specified format
     * User with Execute Export permission on report folder and  Create Entity on an export folder can access this method.
     * @param id report folder id
     * @param exportReportVM export parameters (optional)
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersExport(id: kotlin.String, exportReportVM: ExportReportVM? = null) : FileVM {
        val localVarResponse = reportFoldersExportWithHttpInfo(id = id, exportReportVM = exportReportVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Export specified report folder to a specified format
     * User with Execute Export permission on report folder and  Create Entity on an export folder can access this method.
     * @param id report folder id
     * @param exportReportVM export parameters (optional)
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersExportWithHttpInfo(id: kotlin.String, exportReportVM: ExportReportVM?) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersExportRequestConfig(id = id, exportReportVM = exportReportVM)

        return request<ExportReportVM, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersExport
     *
     * @param id report folder id
     * @param exportReportVM export parameters (optional)
     * @return RequestConfig
     */
    fun reportFoldersExportRequestConfig(id: kotlin.String, exportReportVM: ExportReportVM?) : RequestConfig<ExportReportVM> {
        val localVariableBody = exportReportVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/Folder/{id}/Export".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get specified folder breadcrumbs
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @return BreadcrumbsVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersGetBreadcrumbs(id: kotlin.String) : BreadcrumbsVM {
        val localVarResponse = reportFoldersGetBreadcrumbsWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BreadcrumbsVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get specified folder breadcrumbs
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @return ApiResponse<BreadcrumbsVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersGetBreadcrumbsWithHttpInfo(id: kotlin.String) : ApiResponse<BreadcrumbsVM?> {
        val localVariableConfig = reportFoldersGetBreadcrumbsRequestConfig(id = id)

        return request<Unit, BreadcrumbsVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersGetBreadcrumbs
     *
     * @param id folder id
     * @return RequestConfig
     */
    fun reportFoldersGetBreadcrumbsRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/Breadcrumbs".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersGetFolder(id: kotlin.String) : FileVM {
        val localVarResponse = reportFoldersGetFolderWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersGetFolderWithHttpInfo(id: kotlin.String) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersGetFolderRequestConfig(id = id)

        return request<Unit, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersGetFolder
     *
     * @param id folder id
     * @return RequestConfig
     */
    fun reportFoldersGetFolderRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all folders from specified folder
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @param skip number of files, that have to be skipped (optional, default to 0)
     * @param take number of files, that have to be returned (optional, default to 10)
     * @param orderBy  (optional)
     * @param desc  (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return FilesVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersGetFolders(id: kotlin.String, skip: kotlin.Int? = 0, take: kotlin.Int? = 10, orderBy: FileSorting? = null, desc: kotlin.Boolean? = false, searchPattern: kotlin.String? = "", useRegex: kotlin.Boolean? = false) : FilesVM {
        val localVarResponse = reportFoldersGetFoldersWithHttpInfo(id = id, skip = skip, take = take, orderBy = orderBy, desc = desc, searchPattern = searchPattern, useRegex = useRegex)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FilesVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all folders from specified folder
     * User with a Get Entity permission can access this method.
     * @param id folder id
     * @param skip number of files, that have to be skipped (optional, default to 0)
     * @param take number of files, that have to be returned (optional, default to 10)
     * @param orderBy  (optional)
     * @param desc  (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return ApiResponse<FilesVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersGetFoldersWithHttpInfo(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, orderBy: FileSorting?, desc: kotlin.Boolean?, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : ApiResponse<FilesVM?> {
        val localVariableConfig = reportFoldersGetFoldersRequestConfig(id = id, skip = skip, take = take, orderBy = orderBy, desc = desc, searchPattern = searchPattern, useRegex = useRegex)

        return request<Unit, FilesVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersGetFolders
     *
     * @param id folder id
     * @param skip number of files, that have to be skipped (optional, default to 0)
     * @param take number of files, that have to be returned (optional, default to 10)
     * @param orderBy  (optional)
     * @param desc  (optional, default to false)
     * @param searchPattern  (optional, default to "")
     * @param useRegex  (optional, default to false)
     * @return RequestConfig
     */
    fun reportFoldersGetFoldersRequestConfig(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, orderBy: FileSorting?, desc: kotlin.Boolean?, searchPattern: kotlin.String?, useRegex: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (take != null) {
                    put("take", listOf(take.toString()))
                }
                if (orderBy != null) {
                    put("orderBy", listOf(orderBy.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
                if (searchPattern != null) {
                    put("searchPattern", listOf(searchPattern.toString()))
                }
                if (useRegex != null) {
                    put("useRegex", listOf(useRegex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/ListFolders".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get count of folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param id folder id
     * @return CountVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersGetFoldersCount(id: kotlin.String) : CountVM {
        val localVarResponse = reportFoldersGetFoldersCountWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CountVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get count of folders what contains in a specified folder
     * User with a Get Count permission can access this method.
     * @param id folder id
     * @return ApiResponse<CountVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersGetFoldersCountWithHttpInfo(id: kotlin.String) : ApiResponse<CountVM?> {
        val localVariableConfig = reportFoldersGetFoldersCountRequestConfig(id = id)

        return request<Unit, CountVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersGetFoldersCount
     *
     * @param id folder id
     * @return RequestConfig
     */
    fun reportFoldersGetFoldersCountRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/CountFolders".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param name folder name (optional)
     * @param subscriptionId subscriptionId (optional)
     * @param parentId parent folder id (optional)
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersGetOrCreate(name: kotlin.String? = null, subscriptionId: kotlin.String? = null, parentId: kotlin.String? = null) : FileVM {
        val localVarResponse = reportFoldersGetOrCreateWithHttpInfo(name = name, subscriptionId = subscriptionId, parentId = parentId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get specified folder
     * User with a Get Entity permission can access this method.
     * @param name folder name (optional)
     * @param subscriptionId subscriptionId (optional)
     * @param parentId parent folder id (optional)
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersGetOrCreateWithHttpInfo(name: kotlin.String?, subscriptionId: kotlin.String?, parentId: kotlin.String?) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersGetOrCreateRequestConfig(name = name, subscriptionId = subscriptionId, parentId = parentId)

        return request<Unit, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersGetOrCreate
     *
     * @param name folder name (optional)
     * @param subscriptionId subscriptionId (optional)
     * @param parentId parent folder id (optional)
     * @return RequestConfig
     */
    fun reportFoldersGetOrCreateRequestConfig(name: kotlin.String?, subscriptionId: kotlin.String?, parentId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (subscriptionId != null) {
                    put("subscriptionId", listOf(subscriptionId.toString()))
                }
                if (parentId != null) {
                    put("parentId", listOf(parentId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/getOrCreate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all folder permissions
     * 
     * @param id 
     * @return FilePermissionsVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersGetPermissions(id: kotlin.String) : FilePermissionsVM {
        val localVarResponse = reportFoldersGetPermissionsWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FilePermissionsVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all folder permissions
     * 
     * @param id 
     * @return ApiResponse<FilePermissionsVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersGetPermissionsWithHttpInfo(id: kotlin.String) : ApiResponse<FilePermissionsVM?> {
        val localVariableConfig = reportFoldersGetPermissionsRequestConfig(id = id)

        return request<Unit, FilePermissionsVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersGetPermissions
     *
     * @param id 
     * @return RequestConfig
     */
    fun reportFoldersGetPermissionsRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/permissions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get user&#39;s root folder (without parents)
     * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
     * @param subscriptionId  (optional)
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersGetRootFolder(subscriptionId: kotlin.String? = null) : FileVM {
        val localVarResponse = reportFoldersGetRootFolderWithHttpInfo(subscriptionId = subscriptionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get user&#39;s root folder (without parents)
     * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
     * @param subscriptionId  (optional)
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersGetRootFolderWithHttpInfo(subscriptionId: kotlin.String?) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersGetRootFolderRequestConfig(subscriptionId = subscriptionId)

        return request<Unit, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersGetRootFolder
     *
     * @param subscriptionId  (optional)
     * @return RequestConfig
     */
    fun reportFoldersGetRootFolderRequestConfig(subscriptionId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (subscriptionId != null) {
                    put("subscriptionId", listOf(subscriptionId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Root",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param id moving folder id
     * @param folderId destination folder id
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersMoveFolder(id: kotlin.String, folderId: kotlin.String) : FileVM {
        val localVarResponse = reportFoldersMoveFolderWithHttpInfo(id = id, folderId = folderId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Move folder to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param id moving folder id
     * @param folderId destination folder id
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersMoveFolderWithHttpInfo(id: kotlin.String, folderId: kotlin.String) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersMoveFolderRequestConfig(id = id, folderId = folderId)

        return request<Unit, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersMoveFolder
     *
     * @param id moving folder id
     * @param folderId destination folder id
     * @return RequestConfig
     */
    fun reportFoldersMoveFolderRequestConfig(id: kotlin.String, folderId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/Folder/{id}/Move/{folderId}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"folderId"+"}", encodeURIComponent(folderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Move specified folder to recycle bin
     * User with a Delete Entity permission can access this method.
     * @param id folder id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersMoveFolderToBin(id: kotlin.String) : Unit {
        val localVarResponse = reportFoldersMoveFolderToBinWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Move specified folder to recycle bin
     * User with a Delete Entity permission can access this method.
     * @param id folder id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersMoveFolderToBinWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = reportFoldersMoveFolderToBinRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersMoveFolderToBin
     *
     * @param id folder id
     * @return RequestConfig
     */
    fun reportFoldersMoveFolderToBinRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/rp/v1/Reports/Folder/{id}/ToBin".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create folder
     * User with a Create Entity permisison can access this method.
     * @param id Identifier of parent folder id
     * @param reportFolderCreateVM create VM (optional)
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersPostFolder(id: kotlin.String, reportFolderCreateVM: ReportFolderCreateVM? = null) : FileVM {
        val localVarResponse = reportFoldersPostFolderWithHttpInfo(id = id, reportFolderCreateVM = reportFolderCreateVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create folder
     * User with a Create Entity permisison can access this method.
     * @param id Identifier of parent folder id
     * @param reportFolderCreateVM create VM (optional)
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersPostFolderWithHttpInfo(id: kotlin.String, reportFolderCreateVM: ReportFolderCreateVM?) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersPostFolderRequestConfig(id = id, reportFolderCreateVM = reportFolderCreateVM)

        return request<ReportFolderCreateVM, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersPostFolder
     *
     * @param id Identifier of parent folder id
     * @param reportFolderCreateVM create VM (optional)
     * @return RequestConfig
     */
    fun reportFoldersPostFolderRequestConfig(id: kotlin.String, reportFolderCreateVM: ReportFolderCreateVM?) : RequestConfig<ReportFolderCreateVM> {
        val localVariableBody = reportFolderCreateVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/Folder/{id}/Folder".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recover specified folder
     * User with a Delete Entity permission can access this method.
     * @param id folder id
     * @param recoveryPath  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersRecoverFolder(id: kotlin.String, recoveryPath: kotlin.String? = null) : Unit {
        val localVarResponse = reportFoldersRecoverFolderWithHttpInfo(id = id, recoveryPath = recoveryPath)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recover specified folder
     * User with a Delete Entity permission can access this method.
     * @param id folder id
     * @param recoveryPath  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersRecoverFolderWithHttpInfo(id: kotlin.String, recoveryPath: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = reportFoldersRecoverFolderRequestConfig(id = id, recoveryPath = recoveryPath)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersRecoverFolder
     *
     * @param id folder id
     * @param recoveryPath  (optional)
     * @return RequestConfig
     */
    fun reportFoldersRecoverFolderRequestConfig(id: kotlin.String, recoveryPath: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (recoveryPath != null) {
                    put("recoveryPath", listOf(recoveryPath.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/Folder/{id}/Recover".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Rename a folder
     * User with a Update Name permision can access this method.
     * @param id 
     * @param folderRenameVM  (optional)
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersRenameFolder(id: kotlin.String, folderRenameVM: FolderRenameVM? = null) : FileVM {
        val localVarResponse = reportFoldersRenameFolderWithHttpInfo(id = id, folderRenameVM = folderRenameVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Rename a folder
     * User with a Update Name permision can access this method.
     * @param id 
     * @param folderRenameVM  (optional)
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersRenameFolderWithHttpInfo(id: kotlin.String, folderRenameVM: FolderRenameVM?) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersRenameFolderRequestConfig(id = id, folderRenameVM = folderRenameVM)

        return request<FolderRenameVM, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersRenameFolder
     *
     * @param id 
     * @param folderRenameVM  (optional)
     * @return RequestConfig
     */
    fun reportFoldersRenameFolderRequestConfig(id: kotlin.String, folderRenameVM: FolderRenameVM?) : RequestConfig<FolderRenameVM> {
        val localVariableBody = folderRenameVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/rp/v1/Reports/Folder/{id}/Rename".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a folder&#39;s icon
     * User with a Update Icon permission can access this method.
     * @param id Identifier of folder
     * @param folderIconVM Update icon model (optional)
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersUpdateIcon(id: kotlin.String, folderIconVM: FolderIconVM? = null) : FileVM {
        val localVarResponse = reportFoldersUpdateIconWithHttpInfo(id = id, folderIconVM = folderIconVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a folder&#39;s icon
     * User with a Update Icon permission can access this method.
     * @param id Identifier of folder
     * @param folderIconVM Update icon model (optional)
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersUpdateIconWithHttpInfo(id: kotlin.String, folderIconVM: FolderIconVM?) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersUpdateIconRequestConfig(id = id, folderIconVM = folderIconVM)

        return request<FolderIconVM, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersUpdateIcon
     *
     * @param id Identifier of folder
     * @param folderIconVM Update icon model (optional)
     * @return RequestConfig
     */
    fun reportFoldersUpdateIconRequestConfig(id: kotlin.String, folderIconVM: FolderIconVM?) : RequestConfig<FolderIconVM> {
        val localVariableBody = folderIconVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/rp/v1/Reports/Folder/{id}/Icon".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update permissions
     * 
     * @param id 
     * @param updateFilePermissionsVM  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersUpdatePermissions(id: kotlin.String, updateFilePermissionsVM: UpdateFilePermissionsVM? = null) : Unit {
        val localVarResponse = reportFoldersUpdatePermissionsWithHttpInfo(id = id, updateFilePermissionsVM = updateFilePermissionsVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update permissions
     * 
     * @param id 
     * @param updateFilePermissionsVM  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersUpdatePermissionsWithHttpInfo(id: kotlin.String, updateFilePermissionsVM: UpdateFilePermissionsVM?) : ApiResponse<Unit?> {
        val localVariableConfig = reportFoldersUpdatePermissionsRequestConfig(id = id, updateFilePermissionsVM = updateFilePermissionsVM)

        return request<UpdateFilePermissionsVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersUpdatePermissions
     *
     * @param id 
     * @param updateFilePermissionsVM  (optional)
     * @return RequestConfig
     */
    fun reportFoldersUpdatePermissionsRequestConfig(id: kotlin.String, updateFilePermissionsVM: UpdateFilePermissionsVM?) : RequestConfig<UpdateFilePermissionsVM> {
        val localVariableBody = updateFilePermissionsVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/{id}/permissions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update tags
     * User with a Update Tags permission can access this method.
     * @param id 
     * @param folderTagsUpdateVM  (optional)
     * @return FileVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportFoldersUpdateTags(id: kotlin.String, folderTagsUpdateVM: FolderTagsUpdateVM? = null) : FileVM {
        val localVarResponse = reportFoldersUpdateTagsWithHttpInfo(id = id, folderTagsUpdateVM = folderTagsUpdateVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update tags
     * User with a Update Tags permission can access this method.
     * @param id 
     * @param folderTagsUpdateVM  (optional)
     * @return ApiResponse<FileVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportFoldersUpdateTagsWithHttpInfo(id: kotlin.String, folderTagsUpdateVM: FolderTagsUpdateVM?) : ApiResponse<FileVM?> {
        val localVariableConfig = reportFoldersUpdateTagsRequestConfig(id = id, folderTagsUpdateVM = folderTagsUpdateVM)

        return request<FolderTagsUpdateVM, FileVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportFoldersUpdateTags
     *
     * @param id 
     * @param folderTagsUpdateVM  (optional)
     * @return RequestConfig
     */
    fun reportFoldersUpdateTagsRequestConfig(id: kotlin.String, folderTagsUpdateVM: FolderTagsUpdateVM?) : RequestConfig<FolderTagsUpdateVM> {
        val localVariableBody = folderTagsUpdateVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/rp/v1/Reports/Folder/{id}/UpdateTags".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Copy file to a specified folder
     * 
     * @param id file id
     * @param folderId folder id
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsCopyFile(id: kotlin.String, folderId: kotlin.String) : ReportVM {
        val localVarResponse = reportsCopyFileWithHttpInfo(id = id, folderId = folderId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Copy file to a specified folder
     * 
     * @param id file id
     * @param folderId folder id
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsCopyFileWithHttpInfo(id: kotlin.String, folderId: kotlin.String) : ApiResponse<ReportVM?> {
        val localVariableConfig = reportsCopyFileRequestConfig(id = id, folderId = folderId)

        return request<Unit, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsCopyFile
     *
     * @param id file id
     * @param folderId folder id
     * @return RequestConfig
     */
    fun reportsCopyFileRequestConfig(id: kotlin.String, folderId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/File/{id}/Copy/{folderId}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"folderId"+"}", encodeURIComponent(folderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create a new key, that can be used to share access to a file  (You need Administrate.Anon permission to create a new key)
     * 
     * @param id file id
     * @param createFileShareVM parameters for sharing key creation (optional)
     * @return FileSharingKeysVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsCreateSharingKey(id: kotlin.String, createFileShareVM: CreateFileShareVM? = null) : FileSharingKeysVM {
        val localVarResponse = reportsCreateSharingKeyWithHttpInfo(id = id, createFileShareVM = createFileShareVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileSharingKeysVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new key, that can be used to share access to a file  (You need Administrate.Anon permission to create a new key)
     * 
     * @param id file id
     * @param createFileShareVM parameters for sharing key creation (optional)
     * @return ApiResponse<FileSharingKeysVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsCreateSharingKeyWithHttpInfo(id: kotlin.String, createFileShareVM: CreateFileShareVM?) : ApiResponse<FileSharingKeysVM?> {
        val localVariableConfig = reportsCreateSharingKeyRequestConfig(id = id, createFileShareVM = createFileShareVM)

        return request<CreateFileShareVM, FileSharingKeysVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsCreateSharingKey
     *
     * @param id file id
     * @param createFileShareVM parameters for sharing key creation (optional)
     * @return RequestConfig
     */
    fun reportsCreateSharingKeyRequestConfig(id: kotlin.String, createFileShareVM: CreateFileShareVM?) : RequestConfig<CreateFileShareVM> {
        val localVariableBody = createFileShareVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/File/{id}/sharingKey".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param id file id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsDeleteFile(id: kotlin.String) : Unit {
        val localVarResponse = reportsDeleteFileWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete specified file
     * User with Delete permission can access the method.
     * @param id file id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsDeleteFileWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = reportsDeleteFileRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsDeleteFile
     *
     * @param id file id
     * @return RequestConfig
     */
    fun reportsDeleteFileRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/rp/v1/Reports/File/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Deletes a sharing key, making links, that utilizing it no longer work
     * 
     * @param id file id
     * @param key key to delete
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsDeleteSharingKey(id: kotlin.String, key: kotlin.String) : Unit {
        val localVarResponse = reportsDeleteSharingKeyWithHttpInfo(id = id, key = key)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Deletes a sharing key, making links, that utilizing it no longer work
     * 
     * @param id file id
     * @param key key to delete
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsDeleteSharingKeyWithHttpInfo(id: kotlin.String, key: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = reportsDeleteSharingKeyRequestConfig(id = id, key = key)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsDeleteSharingKey
     *
     * @param id file id
     * @param key key to delete
     * @return RequestConfig
     */
    fun reportsDeleteSharingKeyRequestConfig(id: kotlin.String, key: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/rp/v1/Reports/File/{id}/sharingKey".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"key"+"}", encodeURIComponent(key.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Export specified report to a specified format
     * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
     * @param id report id
     * @param exportReportVM export parameters (optional)
     * @return ExportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsExport(id: kotlin.String, exportReportVM: ExportReportVM? = null) : ExportVM {
        val localVarResponse = reportsExportWithHttpInfo(id = id, exportReportVM = exportReportVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Export specified report to a specified format
     * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
     * @param id report id
     * @param exportReportVM export parameters (optional)
     * @return ApiResponse<ExportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsExportWithHttpInfo(id: kotlin.String, exportReportVM: ExportReportVM?) : ApiResponse<ExportVM?> {
        val localVariableConfig = reportsExportRequestConfig(id = id, exportReportVM = exportReportVM)

        return request<ExportReportVM, ExportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsExport
     *
     * @param id report id
     * @param exportReportVM export parameters (optional)
     * @return RequestConfig
     */
    fun reportsExportRequestConfig(id: kotlin.String, exportReportVM: ExportReportVM?) : RequestConfig<ExportReportVM> {
        val localVariableBody = exportReportVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/File/{id}/Export".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get specified file
     * User with Get Entity permission can access this method.
     * @param id file id
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsGetFile(id: kotlin.String) : ReportVM {
        val localVarResponse = reportsGetFileWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get specified file
     * User with Get Entity permission can access this method.
     * @param id file id
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsGetFileWithHttpInfo(id: kotlin.String) : ApiResponse<ReportVM?> {
        val localVariableConfig = reportsGetFileRequestConfig(id = id)

        return request<Unit, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsGetFile
     *
     * @param id file id
     * @return RequestConfig
     */
    fun reportsGetFileRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/File/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Returns list of actions, performed on this file
     * 
     * @param id 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 10)
     * @return AuditActionsVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsGetFileHistory(id: kotlin.String, skip: kotlin.Int? = 0, take: kotlin.Int? = 10) : AuditActionsVM {
        val localVarResponse = reportsGetFileHistoryWithHttpInfo(id = id, skip = skip, take = take)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuditActionsVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns list of actions, performed on this file
     * 
     * @param id 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 10)
     * @return ApiResponse<AuditActionsVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsGetFileHistoryWithHttpInfo(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?) : ApiResponse<AuditActionsVM?> {
        val localVariableConfig = reportsGetFileHistoryRequestConfig(id = id, skip = skip, take = take)

        return request<Unit, AuditActionsVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsGetFileHistory
     *
     * @param id 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 10)
     * @return RequestConfig
     */
    fun reportsGetFileHistoryRequestConfig(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (take != null) {
                    put("take", listOf(take.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/File/{id}/History".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get count of files what contains in a specified folder
     * User with Get Count permission can access this method.
     * @param id folder id
     * @return CountVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsGetFilesCount(id: kotlin.String) : CountVM {
        val localVarResponse = reportsGetFilesCountWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CountVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get count of files what contains in a specified folder
     * User with Get Count permission can access this method.
     * @param id folder id
     * @return ApiResponse<CountVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsGetFilesCountWithHttpInfo(id: kotlin.String) : ApiResponse<CountVM?> {
        val localVariableConfig = reportsGetFilesCountRequestConfig(id = id)

        return request<Unit, CountVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsGetFilesCount
     *
     * @param id folder id
     * @return RequestConfig
     */
    fun reportsGetFilesCountRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/CountFiles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
     * 
     * @param id folder id
     * @param skip number of files, that have to be skipped (optional, default to 0)
     * @param take number of files, that have to be returned (optional, default to 10)
     * @param searchPattern  (optional)
     * @param orderBy  (optional)
     * @param desc  (optional, default to false)
     * @param useRegex  (optional, default to false)
     * @return ReportsVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsGetFilesList(id: kotlin.String, skip: kotlin.Int? = 0, take: kotlin.Int? = 10, searchPattern: kotlin.String? = null, orderBy: FileSorting? = null, desc: kotlin.Boolean? = false, useRegex: kotlin.Boolean? = false) : ReportsVM {
        val localVarResponse = reportsGetFilesListWithHttpInfo(id = id, skip = skip, take = take, searchPattern = searchPattern, orderBy = orderBy, desc = desc, useRegex = useRegex)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportsVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
     * 
     * @param id folder id
     * @param skip number of files, that have to be skipped (optional, default to 0)
     * @param take number of files, that have to be returned (optional, default to 10)
     * @param searchPattern  (optional)
     * @param orderBy  (optional)
     * @param desc  (optional, default to false)
     * @param useRegex  (optional, default to false)
     * @return ApiResponse<ReportsVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsGetFilesListWithHttpInfo(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, searchPattern: kotlin.String?, orderBy: FileSorting?, desc: kotlin.Boolean?, useRegex: kotlin.Boolean?) : ApiResponse<ReportsVM?> {
        val localVariableConfig = reportsGetFilesListRequestConfig(id = id, skip = skip, take = take, searchPattern = searchPattern, orderBy = orderBy, desc = desc, useRegex = useRegex)

        return request<Unit, ReportsVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsGetFilesList
     *
     * @param id folder id
     * @param skip number of files, that have to be skipped (optional, default to 0)
     * @param take number of files, that have to be returned (optional, default to 10)
     * @param searchPattern  (optional)
     * @param orderBy  (optional)
     * @param desc  (optional, default to false)
     * @param useRegex  (optional, default to false)
     * @return RequestConfig
     */
    fun reportsGetFilesListRequestConfig(id: kotlin.String, skip: kotlin.Int?, take: kotlin.Int?, searchPattern: kotlin.String?, orderBy: FileSorting?, desc: kotlin.Boolean?, useRegex: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (take != null) {
                    put("take", listOf(take.toString()))
                }
                if (searchPattern != null) {
                    put("searchPattern", listOf(searchPattern.toString()))
                }
                if (orderBy != null) {
                    put("orderBy", listOf(orderBy.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
                if (useRegex != null) {
                    put("useRegex", listOf(useRegex.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/Folder/{id}/ListFiles".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param id 
     * @return FilePermissionsVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsGetPermissions(id: kotlin.String) : FilePermissionsVM {
        val localVarResponse = reportsGetPermissionsWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FilePermissionsVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param id 
     * @return ApiResponse<FilePermissionsVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsGetPermissionsWithHttpInfo(id: kotlin.String) : ApiResponse<FilePermissionsVM?> {
        val localVariableConfig = reportsGetPermissionsRequestConfig(id = id)

        return request<Unit, FilePermissionsVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsGetPermissions
     *
     * @param id 
     * @return RequestConfig
     */
    fun reportsGetPermissionsRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/File/{id}/permissions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Returns all sharing keys, associated with the file
     * 
     * @param id file id
     * @return FileSharingKeysVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsGetSharingKeys(id: kotlin.String) : FileSharingKeysVM {
        val localVarResponse = reportsGetSharingKeysWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileSharingKeysVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns all sharing keys, associated with the file
     * 
     * @param id file id
     * @return ApiResponse<FileSharingKeysVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsGetSharingKeysWithHttpInfo(id: kotlin.String) : ApiResponse<FileSharingKeysVM?> {
        val localVariableConfig = reportsGetSharingKeysRequestConfig(id = id)

        return request<Unit, FileSharingKeysVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsGetSharingKeys
     *
     * @param id file id
     * @return RequestConfig
     */
    fun reportsGetSharingKeysRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/rp/v1/Reports/File/{id}/sharingKeys".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Move file to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param id file id
     * @param folderId folder id
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsMoveFile(id: kotlin.String, folderId: kotlin.String) : ReportVM {
        val localVarResponse = reportsMoveFileWithHttpInfo(id = id, folderId = folderId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Move file to a specified folder
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     * @param id file id
     * @param folderId folder id
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsMoveFileWithHttpInfo(id: kotlin.String, folderId: kotlin.String) : ApiResponse<ReportVM?> {
        val localVariableConfig = reportsMoveFileRequestConfig(id = id, folderId = folderId)

        return request<Unit, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsMoveFile
     *
     * @param id file id
     * @param folderId folder id
     * @return RequestConfig
     */
    fun reportsMoveFileRequestConfig(id: kotlin.String, folderId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/File/{id}/Move/{folderId}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"folderId"+"}", encodeURIComponent(folderId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Move specified file to recycle bin
     * User with Delete permission can access the method.
     * @param id file id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsMoveFileToBin(id: kotlin.String) : Unit {
        val localVarResponse = reportsMoveFileToBinWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Move specified file to recycle bin
     * User with Delete permission can access the method.
     * @param id file id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsMoveFileToBinWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = reportsMoveFileToBinRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsMoveFileToBin
     *
     * @param id file id
     * @return RequestConfig
     */
    fun reportsMoveFileToBinRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/rp/v1/Reports/File/{id}/ToBin".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Recover specified file from bin
     * User with Delete permission can access the method.
     * @param id file id
     * @param recoveryPath  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsRecoverFile(id: kotlin.String, recoveryPath: kotlin.String? = null) : Unit {
        val localVarResponse = reportsRecoverFileWithHttpInfo(id = id, recoveryPath = recoveryPath)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Recover specified file from bin
     * User with Delete permission can access the method.
     * @param id file id
     * @param recoveryPath  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsRecoverFileWithHttpInfo(id: kotlin.String, recoveryPath: kotlin.String?) : ApiResponse<Unit?> {
        val localVariableConfig = reportsRecoverFileRequestConfig(id = id, recoveryPath = recoveryPath)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsRecoverFile
     *
     * @param id file id
     * @param recoveryPath  (optional)
     * @return RequestConfig
     */
    fun reportsRecoverFileRequestConfig(id: kotlin.String, recoveryPath: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (recoveryPath != null) {
                    put("recoveryPath", listOf(recoveryPath.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/File/{id}/Recover".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Rename a file
     * User with Update Name permission can access this method.
     * @param id 
     * @param fileRenameVM  (optional)
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsRenameFile(id: kotlin.String, fileRenameVM: FileRenameVM? = null) : ReportVM {
        val localVarResponse = reportsRenameFileWithHttpInfo(id = id, fileRenameVM = fileRenameVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Rename a file
     * User with Update Name permission can access this method.
     * @param id 
     * @param fileRenameVM  (optional)
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsRenameFileWithHttpInfo(id: kotlin.String, fileRenameVM: FileRenameVM?) : ApiResponse<ReportVM?> {
        val localVariableConfig = reportsRenameFileRequestConfig(id = id, fileRenameVM = fileRenameVM)

        return request<FileRenameVM, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsRenameFile
     *
     * @param id 
     * @param fileRenameVM  (optional)
     * @return RequestConfig
     */
    fun reportsRenameFileRequestConfig(id: kotlin.String, fileRenameVM: FileRenameVM?) : RequestConfig<FileRenameVM> {
        val localVariableBody = fileRenameVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/rp/v1/Reports/File/{id}/Rename".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the &#x60;&#x60; parameter to check prepared timestamp
     * 
     * @param id template id
     * @param previewReportVM Model with parameters (optional)
     * @return ExportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsStaticPreview(id: kotlin.String, previewReportVM: PreviewReportVM? = null) : ExportVM {
        val localVarResponse = reportsStaticPreviewWithHttpInfo(id = id, previewReportVM = previewReportVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the &#x60;&#x60; parameter to check prepared timestamp
     * 
     * @param id template id
     * @param previewReportVM Model with parameters (optional)
     * @return ApiResponse<ExportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsStaticPreviewWithHttpInfo(id: kotlin.String, previewReportVM: PreviewReportVM?) : ApiResponse<ExportVM?> {
        val localVariableConfig = reportsStaticPreviewRequestConfig(id = id, previewReportVM = previewReportVM)

        return request<PreviewReportVM, ExportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsStaticPreview
     *
     * @param id template id
     * @param previewReportVM Model with parameters (optional)
     * @return RequestConfig
     */
    fun reportsStaticPreviewRequestConfig(id: kotlin.String, previewReportVM: PreviewReportVM?) : RequestConfig<PreviewReportVM> {
        val localVariableBody = previewReportVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/File/{id}/StaticPreview".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a files&#39;s icon
     * User with Update Icon permission can access this method.
     * @param id 
     * @param fileIconVM  (optional)
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsUpdateIcon(id: kotlin.String, fileIconVM: FileIconVM? = null) : ReportVM {
        val localVarResponse = reportsUpdateIconWithHttpInfo(id = id, fileIconVM = fileIconVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a files&#39;s icon
     * User with Update Icon permission can access this method.
     * @param id 
     * @param fileIconVM  (optional)
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsUpdateIconWithHttpInfo(id: kotlin.String, fileIconVM: FileIconVM?) : ApiResponse<ReportVM?> {
        val localVariableConfig = reportsUpdateIconRequestConfig(id = id, fileIconVM = fileIconVM)

        return request<FileIconVM, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsUpdateIcon
     *
     * @param id 
     * @param fileIconVM  (optional)
     * @return RequestConfig
     */
    fun reportsUpdateIconRequestConfig(id: kotlin.String, fileIconVM: FileIconVM?) : RequestConfig<FileIconVM> {
        val localVariableBody = fileIconVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/rp/v1/Reports/File/{id}/Icon".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update permissions
     * 
     * @param id 
     * @param updateFilePermissionsVM  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsUpdatePermissions(id: kotlin.String, updateFilePermissionsVM: UpdateFilePermissionsVM? = null) : Unit {
        val localVarResponse = reportsUpdatePermissionsWithHttpInfo(id = id, updateFilePermissionsVM = updateFilePermissionsVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update permissions
     * 
     * @param id 
     * @param updateFilePermissionsVM  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsUpdatePermissionsWithHttpInfo(id: kotlin.String, updateFilePermissionsVM: UpdateFilePermissionsVM?) : ApiResponse<Unit?> {
        val localVariableConfig = reportsUpdatePermissionsRequestConfig(id = id, updateFilePermissionsVM = updateFilePermissionsVM)

        return request<UpdateFilePermissionsVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsUpdatePermissions
     *
     * @param id 
     * @param updateFilePermissionsVM  (optional)
     * @return RequestConfig
     */
    fun reportsUpdatePermissionsRequestConfig(id: kotlin.String, updateFilePermissionsVM: UpdateFilePermissionsVM?) : RequestConfig<UpdateFilePermissionsVM> {
        val localVariableBody = updateFilePermissionsVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/File/{id}/permissions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update tags
     * User with Update Tags permission can access this method.
     * @param id 
     * @param fileTagsUpdateVM  (optional)
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsUpdateTags(id: kotlin.String, fileTagsUpdateVM: FileTagsUpdateVM? = null) : ReportVM {
        val localVarResponse = reportsUpdateTagsWithHttpInfo(id = id, fileTagsUpdateVM = fileTagsUpdateVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update tags
     * User with Update Tags permission can access this method.
     * @param id 
     * @param fileTagsUpdateVM  (optional)
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsUpdateTagsWithHttpInfo(id: kotlin.String, fileTagsUpdateVM: FileTagsUpdateVM?) : ApiResponse<ReportVM?> {
        val localVariableConfig = reportsUpdateTagsRequestConfig(id = id, fileTagsUpdateVM = fileTagsUpdateVM)

        return request<FileTagsUpdateVM, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsUpdateTags
     *
     * @param id 
     * @param fileTagsUpdateVM  (optional)
     * @return RequestConfig
     */
    fun reportsUpdateTagsRequestConfig(id: kotlin.String, fileTagsUpdateVM: FileTagsUpdateVM?) : RequestConfig<FileTagsUpdateVM> {
        val localVariableBody = fileTagsUpdateVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/rp/v1/Reports/File/{id}/UpdateTags".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
     * User with Create Entity permission can access this method.
     * @param id Identifier of folder
     * @param reportCreateVM file&#39;s view model (optional)
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun reportsUploadFile(id: kotlin.String, reportCreateVM: ReportCreateVM? = null) : ReportVM {
        @Suppress("DEPRECATION")
        val localVarResponse = reportsUploadFileWithHttpInfo(id = id, reportCreateVM = reportCreateVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
     * User with Create Entity permission can access this method.
     * @param id Identifier of folder
     * @param reportCreateVM file&#39;s view model (optional)
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun reportsUploadFileWithHttpInfo(id: kotlin.String, reportCreateVM: ReportCreateVM?) : ApiResponse<ReportVM?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = reportsUploadFileRequestConfig(id = id, reportCreateVM = reportCreateVM)

        return request<ReportCreateVM, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsUploadFile
     *
     * @param id Identifier of folder
     * @param reportCreateVM file&#39;s view model (optional)
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun reportsUploadFileRequestConfig(id: kotlin.String, reportCreateVM: ReportCreateVM?) : RequestConfig<ReportCreateVM> {
        val localVariableBody = reportCreateVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v1/Reports/Folder/{id}/File".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Alternative api for upload a file to the specified folder!
     * User with Create Entity permission can access this method.
     * @param id Identifier of folder
     * @param fileContent 
     * @param templateId  (optional)
     * @param tags  (optional)
     * @param icon  (optional)
     * @return ReportVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun reportsUploadFileV2(id: kotlin.String, fileContent: java.io.File, templateId: kotlin.String? = null, tags: kotlin.collections.List<kotlin.String>? = null, icon: java.io.File? = null) : ReportVM {
        val localVarResponse = reportsUploadFileV2WithHttpInfo(id = id, fileContent = fileContent, templateId = templateId, tags = tags, icon = icon)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReportVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Alternative api for upload a file to the specified folder!
     * User with Create Entity permission can access this method.
     * @param id Identifier of folder
     * @param fileContent 
     * @param templateId  (optional)
     * @param tags  (optional)
     * @param icon  (optional)
     * @return ApiResponse<ReportVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun reportsUploadFileV2WithHttpInfo(id: kotlin.String, fileContent: java.io.File, templateId: kotlin.String?, tags: kotlin.collections.List<kotlin.String>?, icon: java.io.File?) : ApiResponse<ReportVM?> {
        val localVariableConfig = reportsUploadFileV2RequestConfig(id = id, fileContent = fileContent, templateId = templateId, tags = tags, icon = icon)

        return request<Map<String, PartConfig<*>>, ReportVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reportsUploadFileV2
     *
     * @param id Identifier of folder
     * @param fileContent 
     * @param templateId  (optional)
     * @param tags  (optional)
     * @param icon  (optional)
     * @return RequestConfig
     */
    fun reportsUploadFileV2RequestConfig(id: kotlin.String, fileContent: java.io.File, templateId: kotlin.String?, tags: kotlin.collections.List<kotlin.String>?, icon: java.io.File?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "TemplateId" to PartConfig(body = templateId, headers = mutableMapOf()),
            "Tags" to PartConfig(body = tags, headers = mutableMapOf()),
            "Icon" to PartConfig(body = icon, headers = mutableMapOf()),
            "FileContent" to PartConfig(body = fileContent, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/rp/v2/Reports/Folder/{id}/File".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
