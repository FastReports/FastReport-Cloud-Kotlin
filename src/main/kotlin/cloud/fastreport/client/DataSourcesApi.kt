/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cloud.fastreport.client

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import cloud.fastreport.model.CreateDataSourceVM
import cloud.fastreport.model.DataSourcePermissionsVM
import cloud.fastreport.model.DataSourceSorting
import cloud.fastreport.model.DataSourceVM
import cloud.fastreport.model.DataSourcesVM
import cloud.fastreport.model.ProblemDetails
import cloud.fastreport.model.RenameDataSourceVM
import cloud.fastreport.model.UpdateDataSourceConnectionStringVM
import cloud.fastreport.model.UpdateDataSourcePermissionsVM
import cloud.fastreport.model.UpdateDataSourceSubscriptionVM

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DataSourcesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Returns a number of data sources in subscription
     * 
     * @param subscriptionId subscripiton id
     * @return kotlin.Long
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesCountDataSourcesAsync(subscriptionId: kotlin.String) : kotlin.Long {
        val localVarResponse = dataSourcesCountDataSourcesAsyncWithHttpInfo(subscriptionId = subscriptionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Long
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns a number of data sources in subscription
     * 
     * @param subscriptionId subscripiton id
     * @return ApiResponse<kotlin.Long?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesCountDataSourcesAsyncWithHttpInfo(subscriptionId: kotlin.String) : ApiResponse<kotlin.Long?> {
        val localVariableConfig = dataSourcesCountDataSourcesAsyncRequestConfig(subscriptionId = subscriptionId)

        return request<Unit, kotlin.Long>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesCountDataSourcesAsync
     *
     * @param subscriptionId subscripiton id
     * @return RequestConfig
     */
    fun dataSourcesCountDataSourcesAsyncRequestConfig(subscriptionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/data/v1/DataSources/{subscriptionId}/count".replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create new data source
     * 
     * @param createDataSourceVM create viewmodel (optional)
     * @return DataSourceVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesCreateDataSource(createDataSourceVM: CreateDataSourceVM? = null) : DataSourceVM {
        val localVarResponse = dataSourcesCreateDataSourceWithHttpInfo(createDataSourceVM = createDataSourceVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSourceVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create new data source
     * 
     * @param createDataSourceVM create viewmodel (optional)
     * @return ApiResponse<DataSourceVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesCreateDataSourceWithHttpInfo(createDataSourceVM: CreateDataSourceVM?) : ApiResponse<DataSourceVM?> {
        val localVariableConfig = dataSourcesCreateDataSourceRequestConfig(createDataSourceVM = createDataSourceVM)

        return request<CreateDataSourceVM, DataSourceVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesCreateDataSource
     *
     * @param createDataSourceVM create viewmodel (optional)
     * @return RequestConfig
     */
    fun dataSourcesCreateDataSourceRequestConfig(createDataSourceVM: CreateDataSourceVM?) : RequestConfig<CreateDataSourceVM> {
        val localVariableBody = createDataSourceVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/data/v1/DataSources",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete data source by id
     * 
     * @param id data source id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesDeleteDataSource(id: kotlin.String) : Unit {
        val localVarResponse = dataSourcesDeleteDataSourceWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete data source by id
     * 
     * @param id data source id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesDeleteDataSourceWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = dataSourcesDeleteDataSourceRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesDeleteDataSource
     *
     * @param id data source id
     * @return RequestConfig
     */
    fun dataSourcesDeleteDataSourceRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/data/v1/DataSources/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * This should connect to a database and set data structure
     * 
     * @param id datasource&#39;s id
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesFetchData(id: kotlin.String) : Unit {
        val localVarResponse = dataSourcesFetchDataWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * This should connect to a database and set data structure
     * 
     * @param id datasource&#39;s id
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesFetchDataWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = dataSourcesFetchDataRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesFetchData
     *
     * @param id datasource&#39;s id
     * @return RequestConfig
     */
    fun dataSourcesFetchDataRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/data/v1/DataSources/{id}/fetch".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Returns all of the data sources, that current user have permission for in a subscription &lt;br /&gt;  The method will return minimal infomration about the datasources: &lt;br /&gt;  id, name, editedTime, status.
     * 
     * @param subscriptionId id of subscription where the datasources are located (optional)
     * @param skip how many data sources will be skipped (optional, default to 0)
     * @param take how many data sources will be taken (optional, default to 10)
     * @param orderBy field to order by (optional)
     * @param desc descending sort (optional, default to false)
     * @return DataSourcesVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesGetAvailableDataSources(subscriptionId: kotlin.String? = null, skip: kotlin.Int? = 0, take: kotlin.Int? = 10, orderBy: DataSourceSorting? = null, desc: kotlin.Boolean? = false) : DataSourcesVM {
        val localVarResponse = dataSourcesGetAvailableDataSourcesWithHttpInfo(subscriptionId = subscriptionId, skip = skip, take = take, orderBy = orderBy, desc = desc)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSourcesVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns all of the data sources, that current user have permission for in a subscription &lt;br /&gt;  The method will return minimal infomration about the datasources: &lt;br /&gt;  id, name, editedTime, status.
     * 
     * @param subscriptionId id of subscription where the datasources are located (optional)
     * @param skip how many data sources will be skipped (optional, default to 0)
     * @param take how many data sources will be taken (optional, default to 10)
     * @param orderBy field to order by (optional)
     * @param desc descending sort (optional, default to false)
     * @return ApiResponse<DataSourcesVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesGetAvailableDataSourcesWithHttpInfo(subscriptionId: kotlin.String?, skip: kotlin.Int?, take: kotlin.Int?, orderBy: DataSourceSorting?, desc: kotlin.Boolean?) : ApiResponse<DataSourcesVM?> {
        val localVariableConfig = dataSourcesGetAvailableDataSourcesRequestConfig(subscriptionId = subscriptionId, skip = skip, take = take, orderBy = orderBy, desc = desc)

        return request<Unit, DataSourcesVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesGetAvailableDataSources
     *
     * @param subscriptionId id of subscription where the datasources are located (optional)
     * @param skip how many data sources will be skipped (optional, default to 0)
     * @param take how many data sources will be taken (optional, default to 10)
     * @param orderBy field to order by (optional)
     * @param desc descending sort (optional, default to false)
     * @return RequestConfig
     */
    fun dataSourcesGetAvailableDataSourcesRequestConfig(subscriptionId: kotlin.String?, skip: kotlin.Int?, take: kotlin.Int?, orderBy: DataSourceSorting?, desc: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (subscriptionId != null) {
                    put("subscriptionId", listOf(subscriptionId.toString()))
                }
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (take != null) {
                    put("take", listOf(take.toString()))
                }
                if (orderBy != null) {
                    put("orderBy", listOf(orderBy.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/data/v1/DataSources",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get data source by id
     * 
     * @param id data source id
     * @return DataSourceVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesGetDataSource(id: kotlin.String) : DataSourceVM {
        val localVarResponse = dataSourcesGetDataSourceWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSourceVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get data source by id
     * 
     * @param id data source id
     * @return ApiResponse<DataSourceVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesGetDataSourceWithHttpInfo(id: kotlin.String) : ApiResponse<DataSourceVM?> {
        val localVariableConfig = dataSourcesGetDataSourceRequestConfig(id = id)

        return request<Unit, DataSourceVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesGetDataSource
     *
     * @param id data source id
     * @return RequestConfig
     */
    fun dataSourcesGetDataSourceRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/data/v1/DataSources/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get all Data source permissions
     * 
     * @param id data source id
     * @return DataSourcePermissionsVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesGetPermissions(id: kotlin.String) : DataSourcePermissionsVM {
        val localVarResponse = dataSourcesGetPermissionsWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSourcePermissionsVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all Data source permissions
     * 
     * @param id data source id
     * @return ApiResponse<DataSourcePermissionsVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesGetPermissionsWithHttpInfo(id: kotlin.String) : ApiResponse<DataSourcePermissionsVM?> {
        val localVariableConfig = dataSourcesGetPermissionsRequestConfig(id = id)

        return request<Unit, DataSourcePermissionsVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesGetPermissions
     *
     * @param id data source id
     * @return RequestConfig
     */
    fun dataSourcesGetPermissionsRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/data/v1/DataSources/{id}/permissions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Rename data source by id
     * 
     * @param id data source id
     * @param renameDataSourceVM rename viewmodel (optional)
     * @return DataSourceVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesRenameDataSource(id: kotlin.String, renameDataSourceVM: RenameDataSourceVM? = null) : DataSourceVM {
        val localVarResponse = dataSourcesRenameDataSourceWithHttpInfo(id = id, renameDataSourceVM = renameDataSourceVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSourceVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Rename data source by id
     * 
     * @param id data source id
     * @param renameDataSourceVM rename viewmodel (optional)
     * @return ApiResponse<DataSourceVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesRenameDataSourceWithHttpInfo(id: kotlin.String, renameDataSourceVM: RenameDataSourceVM?) : ApiResponse<DataSourceVM?> {
        val localVariableConfig = dataSourcesRenameDataSourceRequestConfig(id = id, renameDataSourceVM = renameDataSourceVM)

        return request<RenameDataSourceVM, DataSourceVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesRenameDataSource
     *
     * @param id data source id
     * @param renameDataSourceVM rename viewmodel (optional)
     * @return RequestConfig
     */
    fun dataSourcesRenameDataSourceRequestConfig(id: kotlin.String, renameDataSourceVM: RenameDataSourceVM?) : RequestConfig<RenameDataSourceVM> {
        val localVariableBody = renameDataSourceVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/data/v1/DataSources/{id}/rename".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update data source&#39;s connection string by id
     * 
     * @param id data source id
     * @param updateDataSourceConnectionStringVM update viewmodel (optional)
     * @return DataSourceVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesUpdateConnectionString(id: kotlin.String, updateDataSourceConnectionStringVM: UpdateDataSourceConnectionStringVM? = null) : DataSourceVM {
        val localVarResponse = dataSourcesUpdateConnectionStringWithHttpInfo(id = id, updateDataSourceConnectionStringVM = updateDataSourceConnectionStringVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DataSourceVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update data source&#39;s connection string by id
     * 
     * @param id data source id
     * @param updateDataSourceConnectionStringVM update viewmodel (optional)
     * @return ApiResponse<DataSourceVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesUpdateConnectionStringWithHttpInfo(id: kotlin.String, updateDataSourceConnectionStringVM: UpdateDataSourceConnectionStringVM?) : ApiResponse<DataSourceVM?> {
        val localVariableConfig = dataSourcesUpdateConnectionStringRequestConfig(id = id, updateDataSourceConnectionStringVM = updateDataSourceConnectionStringVM)

        return request<UpdateDataSourceConnectionStringVM, DataSourceVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesUpdateConnectionString
     *
     * @param id data source id
     * @param updateDataSourceConnectionStringVM update viewmodel (optional)
     * @return RequestConfig
     */
    fun dataSourcesUpdateConnectionStringRequestConfig(id: kotlin.String, updateDataSourceConnectionStringVM: UpdateDataSourceConnectionStringVM?) : RequestConfig<UpdateDataSourceConnectionStringVM> {
        val localVariableBody = updateDataSourceConnectionStringVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/data/v1/DataSources/{id}/ConnectionString".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update permissions
     * 
     * @param id 
     * @param updateDataSourcePermissionsVM  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesUpdatePermissions(id: kotlin.String, updateDataSourcePermissionsVM: UpdateDataSourcePermissionsVM? = null) : Unit {
        val localVarResponse = dataSourcesUpdatePermissionsWithHttpInfo(id = id, updateDataSourcePermissionsVM = updateDataSourcePermissionsVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update permissions
     * 
     * @param id 
     * @param updateDataSourcePermissionsVM  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesUpdatePermissionsWithHttpInfo(id: kotlin.String, updateDataSourcePermissionsVM: UpdateDataSourcePermissionsVM?) : ApiResponse<Unit?> {
        val localVariableConfig = dataSourcesUpdatePermissionsRequestConfig(id = id, updateDataSourcePermissionsVM = updateDataSourcePermissionsVM)

        return request<UpdateDataSourcePermissionsVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesUpdatePermissions
     *
     * @param id 
     * @param updateDataSourcePermissionsVM  (optional)
     * @return RequestConfig
     */
    fun dataSourcesUpdatePermissionsRequestConfig(id: kotlin.String, updateDataSourcePermissionsVM: UpdateDataSourcePermissionsVM?) : RequestConfig<UpdateDataSourcePermissionsVM> {
        val localVariableBody = updateDataSourcePermissionsVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/data/v1/DataSources/{id}/permissions".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update data source&#39;s subscription
     * 
     * @param id data source id
     * @param updateDataSourceSubscriptionVM update subscription viewmodel (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataSourcesUpdateSubscriptionDataSource(id: kotlin.String, updateDataSourceSubscriptionVM: UpdateDataSourceSubscriptionVM? = null) : Unit {
        val localVarResponse = dataSourcesUpdateSubscriptionDataSourceWithHttpInfo(id = id, updateDataSourceSubscriptionVM = updateDataSourceSubscriptionVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update data source&#39;s subscription
     * 
     * @param id data source id
     * @param updateDataSourceSubscriptionVM update subscription viewmodel (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun dataSourcesUpdateSubscriptionDataSourceWithHttpInfo(id: kotlin.String, updateDataSourceSubscriptionVM: UpdateDataSourceSubscriptionVM?) : ApiResponse<Unit?> {
        val localVariableConfig = dataSourcesUpdateSubscriptionDataSourceRequestConfig(id = id, updateDataSourceSubscriptionVM = updateDataSourceSubscriptionVM)

        return request<UpdateDataSourceSubscriptionVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataSourcesUpdateSubscriptionDataSource
     *
     * @param id data source id
     * @param updateDataSourceSubscriptionVM update subscription viewmodel (optional)
     * @return RequestConfig
     */
    fun dataSourcesUpdateSubscriptionDataSourceRequestConfig(id: kotlin.String, updateDataSourceSubscriptionVM: UpdateDataSourceSubscriptionVM?) : RequestConfig<UpdateDataSourceSubscriptionVM> {
        val localVariableBody = updateDataSourceSubscriptionVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/data/v1/DataSources/{id}/updateSubscription".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
