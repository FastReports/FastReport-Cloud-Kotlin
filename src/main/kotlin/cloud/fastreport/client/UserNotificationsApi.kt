/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cloud.fastreport.client

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import cloud.fastreport.model.AuditActionsVM
import cloud.fastreport.model.ClearNotificationsVM
import cloud.fastreport.model.ProblemDetails

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class UserNotificationsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Use this endpoint to \&quot;clear\&quot; your notifications
     * 
     * @param clearNotificationsVM  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userNotificationsClearNotifications(clearNotificationsVM: ClearNotificationsVM? = null) : Unit {
        val localVarResponse = userNotificationsClearNotificationsWithHttpInfo(clearNotificationsVM = clearNotificationsVM)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Use this endpoint to \&quot;clear\&quot; your notifications
     * 
     * @param clearNotificationsVM  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun userNotificationsClearNotificationsWithHttpInfo(clearNotificationsVM: ClearNotificationsVM?) : ApiResponse<Unit?> {
        val localVariableConfig = userNotificationsClearNotificationsRequestConfig(clearNotificationsVM = clearNotificationsVM)

        return request<ClearNotificationsVM, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userNotificationsClearNotifications
     *
     * @param clearNotificationsVM  (optional)
     * @return RequestConfig
     */
    fun userNotificationsClearNotificationsRequestConfig(clearNotificationsVM: ClearNotificationsVM?) : RequestConfig<ClearNotificationsVM> {
        val localVariableBody = clearNotificationsVM
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/manage/v1/notifications",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Use this endpoint to recieve notifications
     * 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 5)
     * @param subscriptionId  (optional, default to "")
     * @return AuditActionsVM
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userNotificationsGetNotifications(skip: kotlin.Int? = 0, take: kotlin.Int? = 5, subscriptionId: kotlin.String? = "") : AuditActionsVM {
        val localVarResponse = userNotificationsGetNotificationsWithHttpInfo(skip = skip, take = take, subscriptionId = subscriptionId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuditActionsVM
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Use this endpoint to recieve notifications
     * 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 5)
     * @param subscriptionId  (optional, default to "")
     * @return ApiResponse<AuditActionsVM?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userNotificationsGetNotificationsWithHttpInfo(skip: kotlin.Int?, take: kotlin.Int?, subscriptionId: kotlin.String?) : ApiResponse<AuditActionsVM?> {
        val localVariableConfig = userNotificationsGetNotificationsRequestConfig(skip = skip, take = take, subscriptionId = subscriptionId)

        return request<Unit, AuditActionsVM>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userNotificationsGetNotifications
     *
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 5)
     * @param subscriptionId  (optional, default to "")
     * @return RequestConfig
     */
    fun userNotificationsGetNotificationsRequestConfig(skip: kotlin.Int?, take: kotlin.Int?, subscriptionId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (take != null) {
                    put("take", listOf(take.toString()))
                }
                if (subscriptionId != null) {
                    put("subscriptionId", listOf(subscriptionId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/manage/v1/notifications",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
