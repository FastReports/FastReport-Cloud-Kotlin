/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package cloud.fastreport.model


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * Values: pdf,html,mht,image,biff8,csv,dbf,json,laTeX,odt,ods,docx,pptx,xlsx,xps,ppml,pS,richtext,svg,text,xaml,xml,zpl
 */

@JsonClass(generateAdapter = false)
enum class ExportFormat(val value: kotlin.String) {

    @Json(name = "Pdf")
    pdf("Pdf"),

    @Json(name = "Html")
    html("Html"),

    @Json(name = "Mht")
    mht("Mht"),

    @Json(name = "Image")
    image("Image"),

    @Json(name = "Biff8")
    biff8("Biff8"),

    @Json(name = "Csv")
    csv("Csv"),

    @Json(name = "Dbf")
    dbf("Dbf"),

    @Json(name = "Json")
    json("Json"),

    @Json(name = "LaTeX")
    laTeX("LaTeX"),

    @Json(name = "Odt")
    odt("Odt"),

    @Json(name = "Ods")
    ods("Ods"),

    @Json(name = "Docx")
    docx("Docx"),

    @Json(name = "Pptx")
    pptx("Pptx"),

    @Json(name = "Xlsx")
    xlsx("Xlsx"),

    @Json(name = "Xps")
    xps("Xps"),

    @Json(name = "Ppml")
    ppml("Ppml"),

    @Json(name = "PS")
    pS("PS"),

    @Json(name = "Richtext")
    richtext("Richtext"),

    @Json(name = "Svg")
    svg("Svg"),

    @Json(name = "Text")
    text("Text"),

    @Json(name = "Xaml")
    xaml("Xaml"),

    @Json(name = "Xml")
    xml("Xml"),

    @Json(name = "Zpl")
    zpl("Zpl");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ExportFormat) "$data" else null

        /**
         * Returns a valid [ExportFormat] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ExportFormat? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

